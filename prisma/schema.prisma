// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Enum for NFT types
enum NftType {
  ERC721
  ERC1155
}

// New model for NFT collections
model Nft {
  id              Int      @id @default(autoincrement())
  chainId         Int
  contractAddress String
  ownerAddress    String?
  supply          String? // Using String to handle large numbers
  symbol          String?
  name            String
  logoUri         String?
  bannerUri       String?
  description     String?
  type            NftType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  watching        Boolean  @default(false)

  // Composite unique constraint to ensure uniqueness of NFT collections per chain
  @@unique([chainId, contractAddress])
  // Index for faster queries
  @@index([chainId])
  @@index([ownerAddress])
  @@index([type])
}

// Model for NFT tokens within a collection (for ERC1155)
model NftToken {
  id              Int      @id @default(autoincrement())
  chainId         Int
  contractAddress String
  tokenId         String // Using String to handle large token IDs
  supply          String? // Using String to handle large numbers
  ownerAddress    String?
  metadata        String? // JSON metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Composite unique constraint to ensure uniqueness of NFT tokens
  @@unique([chainId, contractAddress, tokenId])
  // Index for faster queries
  @@index([chainId, contractAddress])
  @@index([ownerAddress])
}
